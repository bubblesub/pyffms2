name: pyffms2-deploy

on:
  push:
    tags:
      - '*.*.*'

jobs:
  create-binaries:

    runs-on: ubuntu-latest

    env:
      DAV1D_DIR: dav1d-dir
      OGG_DIR: ogg-dir
      VORBIS_DIR: vorbis-dir
      VPX_DIR: vpx-dir
      FFMPEG_DIR: ffmpeg-dir

    steps:
    - uses: actions/checkout@v1

    - name: Install mingw
      env:
        BASE_PKGS: mingw-w64 mingw-w64-x86-64-dev binutils-mingw-w64
        OTHER_PKGS: mingw-w64-common mingw-w64-tools libz-mingw-w64-dev
      run: sudo apt-get install $BASE_PKGS $OTHER_PKGS

    - name: Run threads on mingw
      run: |
        echo "1"| sudo update-alternatives --config x86_64-w64-mingw32-gcc
        echo "1"| sudo update-alternatives --config x86_64-w64-mingw32-g++

    - name: Install nasm and yasm
      run: sudo apt-get install nasm yasm

    - name: Install Python3 packages
      env:
        PYTHON3_PKG: python3-setuptools python3-wheel
      run: |
        sudo apt-get install $PYTHON3_PKG

    - name: Install meson and ninja
      run: |
        sudo pip3 install meson ninja

    - name: Install dav1d
      run: |
        git clone --depth 1 https://code.videolan.org/videolan/dav1d.git
        cd dav1d
        cp $GITHUB_WORKSPACE/ffms2-build/cross_mingw_x86_64.txt ./
        meson build \
              -Ddefault_library=static \
              -Denable_tools=false \
              -Denable_tests=false \
              -Dtestdata_tools=false \
              -Dprefix=$HOME/$DAV1D_DIR \
              --buildtype release \
              --cross-file cross_mingw_x86_64.txt
        ninja -C build
        ninja -C build install

    - name: Install ogg
      run: |
        git clone --depth 1 https://github.com/xiph/ogg
        cd ogg
        mkdir -p build
        cd build
        cp $GITHUB_WORKSPACE/ffms2-build/cross.cmake ./
        cmake -DCMAKE_TOOLCHAIN_FILE=cross.cmake \
              -DCMAKE_INSTALL_PREFIX=$HOME/$OGG_DIR \
              ..
        make -j12
        make install

    - name: Install vorbis
      run: |
        git clone --depth 1 https://github.com/xiph/vorbis
        cd vorbis
        mkdir -p build
        cd build
        cp $GITHUB_WORKSPACE/ffms2-build/cross.cmake ./
        cmake -DOGG_ROOT=$HOME/$OGG_DIR \
              -DCMAKE_TOOLCHAIN_FILE=cross.cmake \
              -DCMAKE_INSTALL_PREFIX=$HOME/$VORBIS_DIR \
              ..
        make -j12
        make install

    - name: Bundle libvorbis
      run: |
        cd $HOME/$VORBIS_DIR/lib
        cp $HOME/$OGG_DIR/lib/libogg.a ./
        printf "CREATE libvorbis.a \n \
                ADDLIB libvorbis.a \n \
                ADDLIB libogg.a \n \
                SAVE \n \
                END" > join-vorbis
        printf "CREATE libvorbisfile.a \n \
                ADDLIB libvorbisfile.a \n \
                ADDLIB libogg.a \n \
                SAVE \n \
                END" > join-vorbisfile
        printf "CREATE libvorbisenc.a \n \
                ADDLIB libvorbisenc.a \n \
                ADDLIB libvorbis.a \n \
                SAVE \n \
                END" > join-vorbisenc
        x86_64-w64-mingw32-ar -M <join-vorbis
        x86_64-w64-mingw32-ar -M <join-vorbisfile
        x86_64-w64-mingw32-ar -M <join-vorbisenc
        x86_64-w64-mingw32-ar -s libvorbis.a
        x86_64-w64-mingw32-ar -s libvorbisfile.a
        x86_64-w64-mingw32-ar -s libvorbisenc.a

    - name: Install vpx
      run: |
        git clone --depth 1 https://github.com/webmproject/libvpx.git
        cd libvpx
        ./configure --target=x86_64-win64-gcc \
                    --disable-shared \
                    --enable-pic \
                    --disable-vp8-encoder \
                    --disable-vp9-encoder \
                    --enable-internal-stats \
                    --disable-examples \
                    --disable-tools \
                    --disable-docs \
                    --disable-unit-tests \
                    --prefix=$HOME/$VORBIS_DIR
        make -j12
        make install

    - name: Install ffmpeg
      env:
        LINK: https://github.com/FFmpeg/FFmpeg.git
      run: |
        export PKG_CONFIG_PATH=$HOME/$OGG_DIR/lib/pkgconfig:$PKG_CONFIG_PATH
        export PKG_CONFIG_PATH=$HOME/$VORBIS_DIR/lib/pkgconfig:$PKG_CONFIG_PATH
        export PKG_CONFIG_PATH=$HOME/$DAV1D_DIR/lib/pkgconfig:$PKG_CONFIG_PATH
        export PKG_CONFIG_PATH=$HOME/$VPX_DIR/lib/pkgconfig:$PKG_CONFIG_PATH
        git clone --depth 1 $LINK
        cd FFmpeg
        ./configure --disable-autodetect \
                    --disable-bsfs \
                    --disable-doc \
                    --disable-encoders \
                    --disable-filters \
                    --disable-muxers \
                    --disable-outdevs \
                    --disable-programs \
                    --enable-gpl \
                    --enable-libvpx \
                    --enable-libdav1d \
                    --enable-libvorbis \
                    --enable-pic \
                    --arch=x86_64 \
                    --target-os=mingw32 \
                    --cross-prefix=x86_64-w64-mingw32- \
                    --prefix=$HOME/$FFMPEG_DIR
        make -j12
        make install

    - name: Install ffms2
      env:
        FFMS2_DIR: ffms2-dir
        LINK: https://github.com/FFMS/ffms2
        PKG_PATH: lib/pkgconfig
      run: |
        export PKG_CONFIG_PATH=$HOME/$FFMPEG_DIR/$PKG_PATH:$PKG_CONFIG_PATH
        git clone --depth 1 $LINK $FFMS2_DIR
        cp $GITHUB_WORKSPACE/ffms2-build/* $FFMS2_DIR
        cd $FFMS2_DIR
        ./meson-ffms2
        cd build-windows/
        zip ffms2.zip ffmsindex.exe ffms2.dll
        mv ffms2.zip $GITHUB_WORKSPACE

    - name: Upload binaries
      uses: actions/upload-artifact@v1
      with:
        name: ffms2
        path: ffms2.zip

  create-lib:
    needs: create-binaries

    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Download the zip
      uses: actions/download-artifact@v1
      with:
        name: ffms2

    - name: Create the lib
      env:
        VS_PATH: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise
      shell: cmd
      run: |
        set PATH=%VS_PATH%\VC\Tools\MSVC\14.23.28105\bin\Hostx64\x64;%PATH%
        cd ffms2
        7z x ffms2.zip
        del /f ffms2.zip
        dumpbin /EXPORTS ffms2.dll > ffms2.txt
        echo EXPORTS >> ffms2.def
        for /f "skip=19 tokens=4" %%A in ("type ffms2.txt") do ( ^
            echo %%A >> ffms2.def ^
        )
        lib /def:ffms2.def /machine:x64 /out:ffms2.lib
        7z a ffms2.zip ffms2.dll ffmsindex.exe ffms2.lib

    - name: Create a Release
      uses: softprops/action-gh-release@v1
      with:
        files: ffms2/ffms2.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
